name: Automated tests

on: 
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Choose target'
        required: true
        default: all_browsers
        type: choice
        options:
          - sound_check
          - all_browsers_parallel
          - production(all_browsers)
          - staging(all_browsers)
          - dev(all_browsers)
          - chrome_only
          - firefox_only
          - edge_only
          - highest_priority(all_browsers)
          - lowest_priority(all_browsers)
          - api_testing_parallel
          - api_testing_production
          - api_testing_staging
          - api_testing_development

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check Mozila
        run: whereis firefox
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Chrome
        run: sudo apt-get install google-chrome-stable
      - name: Install Edge
        run: sudo apt-get install microsoft-edge-stable
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Install soundcheck
        run: sudo apt install portaudio19-dev
      - name: Sound Check
        if: github.event.inputs.deployment_target == 'sound_check'
        run: python ./test.py
      - name: Production Env
        if: github.event.inputs.deployment_target == 'production(all_browsers)'
        run: pytest ./web --alluredir=./web/allure-report --env production
      - name: Staging Env
        if: github.event.inputs.deployment_target == 'staging(all_browsers)'
        run: pytest ./web --alluredir=./web/allure-report --env staging
      - name: Dev Env
        if: github.event.inputs.deployment_target == 'dev(all_browsers)'
        run: pytest ./web --alluredir=./web/allure-report --env dev
      - name: Only Chrome
        if: github.event.inputs.deployment_target == 'chrome_only'
        run: pytest ./web -v -k 'chrome' --alluredir=./web/allure-report
      - name: Only Firefox
        if: github.event.inputs.deployment_target == 'firefox_only'
        run: pytest ./web -v -k 'firefox' --alluredir=./web/allure-report
      - name: Only Edge
        if: github.event.inputs.deployment_target == 'edge_only'
        run: pytest ./web -v -k 'edge' --alluredir=./web/allure-report
      - name: P1 suite
        if: github.event.inputs.deployment_target == 'highest_priority'
        run: pytest ./web -v -m high_priority --alluredir=./web/allure-report
      - name: P2 suite
        if: github.event.inputs.deployment_target == 'lowest_priority'
        run: pytest ./web -v -m low_priority --alluredir=./web/allure-report
      - name: Parallel all browsers
        if: github.event.inputs.deployment_target == 'all_browsers_parallel'
        run: pytest ./web -v -n 3 --alluredir=./web/allure-report
      - name: API testing
        if: github.event.inputs.deployment_target == 'api_testing_parallel'
        run: pytest ./api -v -n auto --alluredir=./api/allure-report
      - name: API testing production
        if: github.event.inputs.deployment_target == 'api_testing_production'
        run: pytest ./api -v -n auto --alluredir=./api/allure-report --env production
      - name: API testing staging
        if: github.event.inputs.deployment_target == 'api_testing_staging'
        run: pytest ./api -v -n auto --alluredir=./api/allure-report --env staging
      - name: API testing development
        if: github.event.inputs.deployment_target == 'api_testing_development'
        run: pytest ./api -v -n auto --alluredir=./api/allure-report --env development
      - name: Store web allure report
        if: github.event.inputs.deployment_target != 'api_testing_parallel'
        uses: actions/upload-artifact@v3
        with:
          name: allure-report
          path: ./web/allure-report
      - name: Store api allure report
        uses: actions/upload-artifact@v3
        if: github.event.inputs.deployment_target == 'api_testing_parallel'
        with:
          name: allure-report
          path: ./api/allure-report
      - name: Store failed screenshots
        uses: actions/upload-artifact@v3
        with:
          name: failed_screenshots
          path: failed_screenshots
          retention-days: 1

  generate_report:
    runs-on: ubuntu-latest
    needs: test
    name: Generate report
    steps:
      - uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '17'
      - run: sudo wget https://github.com/allure-framework/allure2/releases/download/2.23.1/allure-2.23.1.tgz && sudo tar -zxvf allure-2.23.1.tgz -C /opt/ && sudo ln -s /opt/allure-2.23.1/bin/allure /usr/bin/allure
      - name: Download allure report
        uses: actions/download-artifact@v3
      - run: allure generate -c allure-report -o _site
      - name: Store allure report
        uses: actions/upload-artifact@v3
        with:
          name: _site
          path: _site
          retention-days: 1

  publish_report:
    runs-on: ubuntu-latest
    needs: generate_report
    name: Report publication
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v2
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1.2.9